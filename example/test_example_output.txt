====================================== test session starts ======================================
platform linux -- Python 3.7.2, pytest-4.1.0, py-1.7.0, pluggy-0.8.0 -- /usr/bin/python
cachedir: .pytest_cache
rootdir: /home/sebastian/forks/pytest-valgrind, inifile:
plugins: valgrind-0.0.0
collected 8 items

test_example.py::test_all_good PASSED
test_example.py::test_fails_but_valgrind_good xfail
test_example.py::test_valgrind_error FAILED
test_example.py::test_valgrind_leak FAILED
test_example.py::test_valgrind_error_and_leak FAILED
test_example.py::test_valgrind_leak_ignored xfail
test_example.py::test_valgrind_error_ignored xfail
test_example.py::test_valgrind_leak_ignored_but_errors_as_well FAILED

=========================================== FAILURES ============================================
______________________________________ test_valgrind_error ______________________________________
[VALGRIND ERROR]

Valgrind has detected an error:

**8002**
**8002** **********************************************************************
**8002** example/test_example.py::test_valgrind_error
**8002** **********************************************************************
==8002== Conditional jump or move depends on uninitialised value(s)
==8002==    at 0x4B4F9A3: PyBool_FromLong (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x828C411: access_invalid (valgrind.c:60)
==8002==    by 0x4BC2860: _PyMethodDef_RawFastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4BC2A00: _PyCFunction_FastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C38E94: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7CBEA: _PyFunction_FastCallDict (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C361A9: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7CBEA: _PyFunction_FastCallDict (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C361A9: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7BB58: _PyEval_EvalCodeWithName (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4BC2181: _PyFunction_FastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C358EC: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==
==8002== LEAK SUMMARY:
==8002==    definitely lost: 148 (+0) bytes in 1 (+0) blocks
==8002==    indirectly lost: 0 (+0) bytes in 0 (+0) blocks
==8002==      possibly lost: 5,256,118 (+512) bytes in 50,373 (+3) blocks
==8002==    still reachable: 11,540,312 (+373) bytes in 91,024 (+7) blocks
==8002==                       of which reachable via heuristic:
==8002==                         newarray           : 96 (+0) bytes in 2 (+0) blocks
==8002==         suppressed: 0 (+0) bytes in 0 (+0) blocks
==8002== Reachable blocks (those to which a pointer was found) are not shown.
==8002== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8002==
**8002**
**8002** **********************************************************************

______________________________________ test_valgrind_leak _______________________________________
[VALGRIND LEAK]

Valgrind has detected a memory leak:

**8002**
**8002** **********************************************************************
**8002** example/test_example.py::test_valgrind_leak
**8002** **********************************************************************
==8002== 8 (+8) bytes in 1 (+1) blocks are definitely lost in loss record 16 of 12,370
==8002==    at 0x483777F: malloc (vg_replace_malloc.c:299)
==8002==    by 0x828C3DE: create_leak (valgrind.c:42)
==8002==    by 0x4BC2860: _PyMethodDef_RawFastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4BC2A00: _PyCFunction_FastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C38E94: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7CBEA: _PyFunction_FastCallDict (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C361A9: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7CBEA: _PyFunction_FastCallDict (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C361A9: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7BB58: _PyEval_EvalCodeWithName (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4BC2181: _PyFunction_FastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C358EC: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==
==8002== LEAK SUMMARY:
==8002==    definitely lost: 156 (+8) bytes in 2 (+1) blocks
==8002==    indirectly lost: 0 (+0) bytes in 0 (+0) blocks
==8002==      possibly lost: 5,256,556 (+512) bytes in 50,372 (+3) blocks
==8002==    still reachable: 11,545,144 (+372) bytes in 91,048 (+7) blocks
==8002==                       of which reachable via heuristic:
==8002==                         newarray           : 96 (+0) bytes in 2 (+0) blocks
==8002==         suppressed: 0 (+0) bytes in 0 (+0) blocks
==8002== Reachable blocks (those to which a pointer was found) are not shown.
==8002== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8002==
**8002**
**8002** **********************************************************************

_________________________________ test_valgrind_error_and_leak __________________________________
[VALGRIND ERROR+LEAK]

Valgrind detected both an error(s) and a leak(s):

**8002**
**8002** **********************************************************************
**8002** example/test_example.py::test_valgrind_error_and_leak
**8002** **********************************************************************
==8002== 16 (+8) bytes in 2 (+1) blocks are definitely lost in loss record 35 of 12,366
==8002==    at 0x483777F: malloc (vg_replace_malloc.c:299)
==8002==    by 0x828C3DE: create_leak (valgrind.c:42)
==8002==    by 0x4BC2860: _PyMethodDef_RawFastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4BC2A00: _PyCFunction_FastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C38E94: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7CBEA: _PyFunction_FastCallDict (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C361A9: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7CBEA: _PyFunction_FastCallDict (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C361A9: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7BB58: _PyEval_EvalCodeWithName (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4BC2181: _PyFunction_FastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C358EC: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==
==8002== LEAK SUMMARY:
==8002==    definitely lost: 164 (+8) bytes in 3 (+1) blocks
==8002==    indirectly lost: 0 (+0) bytes in 0 (+0) blocks
==8002==      possibly lost: 5,256,568 (+512) bytes in 50,372 (+3) blocks
==8002==    still reachable: 11,549,444 (+382) bytes in 91,069 (+7) blocks
==8002==                       of which reachable via heuristic:
==8002==                         newarray           : 96 (+0) bytes in 2 (+0) blocks
==8002==         suppressed: 0 (+0) bytes in 0 (+0) blocks
==8002== Reachable blocks (those to which a pointer was found) are not shown.
==8002== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8002==
**8002**
**8002** **********************************************************************

_________________________ test_valgrind_leak_ignored_but_errors_as_well _________________________
[VALGRIND ERROR+LEAK]

Valgrind detected both an error(s) and a leak(s):

**8002**
**8002** **********************************************************************
**8002** example/test_example.py::test_valgrind_leak_ignored_but_errors_as_well
**8002** **********************************************************************
==8002== 32 (+8) bytes in 4 (+1) blocks are definitely lost in loss record 1,230 of 12,390
==8002==    at 0x483777F: malloc (vg_replace_malloc.c:299)
==8002==    by 0x828C3DE: create_leak (valgrind.c:42)
==8002==    by 0x4BC2860: _PyMethodDef_RawFastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4BC2A00: _PyCFunction_FastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C38E94: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7CBEA: _PyFunction_FastCallDict (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C361A9: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7CBEA: _PyFunction_FastCallDict (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C361A9: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4B7BB58: _PyEval_EvalCodeWithName (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4BC2181: _PyFunction_FastCallKeywords (in /usr/lib/libpython3.7m.so.1.0)
==8002==    by 0x4C358EC: _PyEval_EvalFrameDefault (in /usr/lib/libpython3.7m.so.1.0)
==8002==
==8002== LEAK SUMMARY:
==8002==    definitely lost: 180 (+8) bytes in 5 (+1) blocks
==8002==    indirectly lost: 0 (+0) bytes in 0 (+0) blocks
==8002==      possibly lost: 5,262,320 (+512) bytes in 50,393 (+3) blocks
==8002==    still reachable: 11,588,737 (+399) bytes in 91,411 (+7) blocks
==8002==                       of which reachable via heuristic:
==8002==                         newarray           : 96 (+0) bytes in 2 (+0) blocks
==8002==         suppressed: 0 (+0) bytes in 0 (+0) blocks
==8002== Reachable blocks (those to which a pointer was found) are not shown.
==8002== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==8002==
**8002**
**8002** **********************************************************************

======================== 4 failed, 1 passed, 3 xfailed in 12.35 seconds =========================